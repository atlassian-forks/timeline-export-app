diff --git a/front_end/timeline_export_app.js b/front_end/timeline_export_app.js
index d050c845..b81f0000 100644
--- a/front_end/timeline_export_app.js
+++ b/front_end/timeline_export_app.js
@@ -25,6 +25,58 @@ function wait(duration) {
   return new Promise(resolve => setTimeout(resolve, duration));
 }
 
+function parseTimeWindow(input) {
+  const fragments = input.split('::');
+
+  if (fragments.length !== 2) {
+    return null;
+  }
+
+  const [rawStartFragment, rawEndFragment] = fragments;
+
+  if (!rawStartFragment.startsWith('start:') || !rawEndFragment.startsWith('end')) {
+    return null;
+  }
+
+  const startFragment = rawStartFragment.replace('start:', '');
+  const endFragment = rawEndFragment.replace('end:', '');
+
+  const startTime = parseFloat(startFragment);
+  const endTime = parseFloat(endFragment);
+
+  if (Number.isNaN(startTime) || Number.isNaN(endTime)) {
+    return null;
+  }
+
+  return { startTime, endTime };
+}
+
 function main(panel) {
+  const originalLoadingComplete = panel.loadingComplete.bind(panel);
+
+  panel.loadingComplete = (...args) => {
+    const result = originalLoadingComplete(...args);
+    const timeWindow = parseTimeWindow(window.location.hash.slice(1));
+
+    if (timeWindow) {
+      panel._overviewPane.setWindowTimes(timeWindow.startTime, timeWindow.endTime);
+    }
+
+    return result;
+  }
+
+  let hashTask;
+
+  panel._overviewPane.addEventListener(
+    PerfUI.TimelineOverviewPane.Events.WindowChanged, ({data: {startTime, endTime}}) => {
+      if (hashTask) {
+        window.cancelIdleCallback(hashTask);
+      }
+
+      hashTask = window.requestIdleCallback(() => {
+        window.location.hash = ['start:', startTime.toFixed(2), '::', 'end:', endTime.toFixed(2)].join('');
+      });
+    });
+
   panel._loadFromURL('./profile.json');
 }
